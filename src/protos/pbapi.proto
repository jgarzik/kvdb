syntax = "proto3";

package kvdbd;

service KeyValueDb {
  rpc DbStat(BasicRequest) returns (DbStatResponse);
  rpc Mutate(MutationRequest) returns (BasicResponse);
  rpc Get(GetRequest) returns (GetResponse);
}

message BasicRequest {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 13243648;
  }
  MagicNum magic = 1;
}

message BasicResponse {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 13243649;
  }
  MagicNum magic = 1;

  bool is_ok = 2;

  sint32 err_code = 3;
  string err_msg = 4;
}

message DbStatResponse {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 11223344;
  }
  MagicNum magic = 1;

  uint64 n_records = 2; // total db record count
}

message KeyRequest {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 22334455;
  }
  MagicNum magic = 1;

  bytes key = 2;	// record key
}

message IterRequest {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 33445566;
  }
  MagicNum magic = 1;

  bytes start_key = 2;	// empty=start iteration. else=continue iter @ key
  bytes prefix = 3;	// limit results to records with keys matching prefix
}

message KeyResponse {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 44556677;
  }
  MagicNum magic = 1;

  repeated bytes keys = 2; // list of keys
  bool list_end = 3;	// end of list(true) or list truncated(false)
}

message UpdateRequest {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 55667788;
  }
  MagicNum magic = 1;

  bytes key = 2;	// record key
  bytes value = 3;	// record value, or empty, if !is_insert
  bool is_insert = 4;	// insert(true) or remove(false)
}

message MutationRequest {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 66778899;
  }
  MagicNum magic = 1;

  repeated UpdateRequest reqs = 2; // list of insert/remove operations
}

message GetOp {
  bytes key = 1;	// record key
  bool skip_val = 2;	// elide record value.  used for existence checks.
}

message GetRequest {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 65778899;
  }
  MagicNum magic = 1;

  repeated GetOp ops = 2; // list of query operations
}

message GetOpResult {
  bytes val = 1;	// record value

  bool is_ok = 2;

  enum GetErr {
    NONE = 0;
    KEY_NOT_FOUND = 1;
  }
  GetErr err = 3;
}

message GetResponse {
  enum MagicNum {
    INVALID = 0;
    MAGIC = 65778809;
  }
  MagicNum magic = 1;

  repeated GetOpResult res = 2; // list of keys
}

